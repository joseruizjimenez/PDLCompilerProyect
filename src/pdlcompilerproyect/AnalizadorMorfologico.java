/* The following code was generated by JFlex 1.4.3 on 12/12/11 19:17 */

package pdlcompilerproyect;

import java_cup.runtime.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 12/12/11 19:17 from the specification file
 * <tt>C:/Prog/CUARTO/PDL/PDLCompilerProyect/src/pdlcompilerproyect/AnalizadorMorfologico.flex</tt>
 */
class AnalizadorMorfologico implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int COMMENT = 2;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1, 1
  };

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = {
     0,  0,  0,  0,  0,  0,  0,  0, 18, 18, 17,  0, 18, 16,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
    18, 51,  0,  0,  0,  0, 42,  0, 46, 47, 20, 41, 39,  2,  3, 19, 
     8,  8,  4,  4,  4,  4,  4,  4,  1,  1, 40, 38, 53, 50, 52,  0, 
     0,  6,  9,  6,  6,  6,  6, 10,  7, 10, 10, 10, 10, 10, 10,  5, 
    10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 48,  0, 49,  0, 10, 
     0, 24, 14, 26, 12, 32, 31, 23, 13, 30, 15, 15, 33, 25, 27, 11, 
    21, 15, 22, 28, 29, 35, 15, 34, 15, 36, 37, 44, 43, 45,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0
  };

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\3\1\2"+
    "\1\3\4\6\2\1\1\7\1\10\13\6\1\11\1\12"+
    "\1\13\1\14\2\2\1\15\1\16\1\17\1\20\1\21"+
    "\1\22\1\23\1\24\1\25\1\26\1\1\3\27\1\0"+
    "\1\30\1\3\1\31\1\32\1\6\1\33\1\6\1\30"+
    "\1\6\1\34\1\35\12\6\1\36\7\6\1\37\1\40"+
    "\1\23\1\41\1\42\1\43\1\44\2\0\1\1\1\45"+
    "\1\46\1\1\2\6\1\30\13\6\1\47\1\50\10\6"+
    "\1\30\12\6\1\51\1\52\1\53\3\6\1\54\3\6"+
    "\1\30\4\6\1\55\1\6\1\56\2\6\1\57\1\52"+
    "\1\60\1\6\1\61\2\6\1\30\2\6\1\62\1\63"+
    "\1\64\5\6\1\30\1\65\1\66\1\6\1\67\3\6"+
    "\1\30\1\70\1\71\2\6\1\30\2\6\1\30\2\6"+
    "\1\30\2\6\1\30\2\6\1\30\2\6\1\30\2\6"+
    "\1\30\2\6\1\30\2\6\1\30\2\6\1\30\2\6"+
    "\1\30\2\6\1\30\2\6\1\30\2\6\1\30\2\6"+
    "\1\30\2\6\1\30\2\6\1\30\2\6\1\30\2\6"+
    "\1\30\2\6\1\30\2\6\1\30\2\6\1\30\2\6"+
    "\1\30\2\6\1\30\2\6\1\30\2\6\1\30\2\6"+
    "\1\30\2\6\1\30\2\6\1\30\2\6\1\30\2\6"+
    "\1\30\2\6\1\30\2\6\1\30\2\6\1\30\2\6"+
    "\1\30\2\6\1\30\2\6\1\30\2\6\1\30\2\6"+
    "\1\30\2\6\1\30\2\6\1\30\2\6\1\30\2\6"+
    "\1\30\2\6\1\30\2\6\1\30\2\6\1\30\2\6"+
    "\1\30\2\6\1\30\2\6\1\30\2\6\1\30\2\6"+
    "\1\30\2\6\1\30\2\6\1\30\2\6\1\30\2\6"+
    "\1\30\2\6\1\30\2\6\1\30\2\6\1\30\2\6"+
    "\1\30\2\6\1\30\2\6\1\30\2\6\1\30\2\6"+
    "\1\30\2\6\1\30\2\6\1\30\2\6\1\30\2\6"+
    "\1\30\2\6\1\30\2\6\1\30\2\6\1\30\2\6"+
    "\1\30\2\6";

  private static int [] zzUnpackAction() {
    int [] result = new int[390];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\66\0\154\0\242\0\330\0\u010e\0\u0144\0\u017a"+
    "\0\u01b0\0\u01e6\0\u021c\0\u0252\0\u0288\0\u02be\0\154\0\u02f4"+
    "\0\154\0\u032a\0\u0360\0\u0396\0\u03cc\0\u0402\0\u0438\0\u046e"+
    "\0\u04a4\0\u04da\0\u0510\0\u0546\0\154\0\154\0\154\0\330"+
    "\0\u057c\0\u05b2\0\154\0\154\0\154\0\154\0\154\0\154"+
    "\0\u05e8\0\u061e\0\u0654\0\u068a\0\u06c0\0\154\0\u06f6\0\u072c"+
    "\0\u017a\0\154\0\u0762\0\154\0\u017a\0\u0798\0\u0798\0\u07ce"+
    "\0\u0798\0\u0804\0\u083a\0\154\0\u0870\0\u08a6\0\u08dc\0\u0912"+
    "\0\u0948\0\u097e\0\u09b4\0\u09ea\0\u0a20\0\u0a56\0\u0798\0\u0a8c"+
    "\0\u0ac2\0\u0af8\0\u0b2e\0\u0b64\0\u0b9a\0\u0bd0\0\154\0\154"+
    "\0\154\0\154\0\154\0\154\0\154\0\u0c06\0\u0c3c\0\u0c72"+
    "\0\154\0\154\0\u0ca8\0\u0cde\0\u0d14\0\u0cde\0\u0d4a\0\u0d80"+
    "\0\u0db6\0\u0dec\0\u0e22\0\u0e58\0\u0e8e\0\u0ec4\0\u0efa\0\u0f30"+
    "\0\u0f66\0\u0cde\0\u0cde\0\u0f9c\0\u0fd2\0\u1008\0\u103e\0\u1074"+
    "\0\u10aa\0\u10e0\0\u1116\0\u10e0\0\u114c\0\u1182\0\u11b8\0\u11ee"+
    "\0\u1224\0\u125a\0\u1290\0\u12c6\0\u12fc\0\u1332\0\u10e0\0\u10e0"+
    "\0\u10e0\0\u1368\0\u139e\0\u13d4\0\u10e0\0\u140a\0\u1440\0\u1476"+
    "\0\u1440\0\u14ac\0\u14e2\0\u1518\0\u154e\0\u1440\0\u1584\0\u1440"+
    "\0\u15ba\0\u15f0\0\u1440\0\u1440\0\u1440\0\u1626\0\u1440\0\u165c"+
    "\0\u1692\0\u165c\0\u16c8\0\u16fe\0\u165c\0\u165c\0\u165c\0\u1734"+
    "\0\u176a\0\u17a0\0\u17d6\0\u180c\0\u17d6\0\u17d6\0\u17d6\0\u1842"+
    "\0\u17d6\0\u1878\0\u18ae\0\u18e4\0\u18ae\0\u18ae\0\u18ae\0\u191a"+
    "\0\u1950\0\u191a\0\u1986\0\u19bc\0\u1986\0\u19f2\0\u1a28\0\u19f2"+
    "\0\u1a5e\0\u1a94\0\u1a5e\0\u1aca\0\u1b00\0\u1aca\0\u1b36\0\u1b6c"+
    "\0\u1b36\0\u1ba2\0\u1bd8\0\u1ba2\0\u1c0e\0\u1c44\0\u1c0e\0\u1c7a"+
    "\0\u1cb0\0\u1c7a\0\u1ce6\0\u1d1c\0\u1ce6\0\u1d52\0\u1d88\0\u1d52"+
    "\0\u1dbe\0\u1df4\0\u1dbe\0\u1e2a\0\u1e60\0\u1e2a\0\u1e96\0\u1ecc"+
    "\0\u1e96\0\u1f02\0\u1f38\0\u1f02\0\u1f6e\0\u1fa4\0\u1f6e\0\u1fda"+
    "\0\u2010\0\u1fda\0\u2046\0\u207c\0\u2046\0\u20b2\0\u20e8\0\u20b2"+
    "\0\u211e\0\u2154\0\u211e\0\u218a\0\u21c0\0\u218a\0\u21f6\0\u222c"+
    "\0\u21f6\0\u2262\0\u2298\0\u2262\0\u22ce\0\u2304\0\u22ce\0\u233a"+
    "\0\u2370\0\u233a\0\u23a6\0\u23dc\0\u23a6\0\u2412\0\u2448\0\u2412"+
    "\0\u247e\0\u24b4\0\u247e\0\u24ea\0\u2520\0\u24ea\0\u2556\0\u258c"+
    "\0\u2556\0\u25c2\0\u25f8\0\u25c2\0\u262e\0\u2664\0\u262e\0\u269a"+
    "\0\u26d0\0\u269a\0\u2706\0\u273c\0\u2706\0\u2772\0\u27a8\0\u2772"+
    "\0\u27de\0\u2814\0\u27de\0\u284a\0\u2880\0\u284a\0\u28b6\0\u28ec"+
    "\0\u28b6\0\u2922\0\u2958\0\u2922\0\u298e\0\u29c4\0\u298e\0\u29fa"+
    "\0\u2a30\0\u29fa\0\u2a66\0\u2a9c\0\u2a66\0\u2ad2\0\u2b08\0\u2ad2"+
    "\0\u2b3e\0\u2b74\0\u2b3e\0\u2baa\0\u2be0\0\u2baa\0\u2c16\0\u2c4c"+
    "\0\u2c16\0\u2c82\0\u2cb8\0\u2c82\0\u2cee\0\u2d24\0\u2cee\0\u2d5a"+
    "\0\u2d90\0\u2d5a\0\u2dc6\0\u2dfc\0\u2dc6\0\u2e32\0\u2e68\0\u2e32"+
    "\0\u2e9e\0\u2ed4\0\u2e9e\0\u2f0a\0\u2f40\0\u2f0a\0\u2f76\0\u2fac"+
    "\0\u2f76\0\u2fe2\0\u3018\0\u2fe2\0\u304e\0\u3084\0\u304e\0\u30ba"+
    "\0\u30f0\0\u30ba\0\u3126\0\u315c\0\u3126\0\u3192\0\u31c8\0\u3192"+
    "\0\u31fe\0\u3234\0\u31fe\0\u326a\0\u32a0\0\u326a\0\u32d6\0\u330c"+
    "\0\u32d6\0\u3342\0\u3378\0\u3342\0\u33ae\0\u33e4\0\u33ae\0\u341a"+
    "\0\u3450\0\u341a\0\u3486\0\u34bc\0\u3486\0\u34f2\0\u3528\0\u34f2"+
    "\0\u355e\0\u3594\0\u355e\0\u35ca\0\u3600\0\u35ca\0\u3636\0\u366c"+
    "\0\u3636\0\u36a2\0\u36d8\0\u36a2\0\154\0\u017a";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[390];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\3\1\4\1\5\1\6\1\7\1\3\1\10\1\3"+
    "\1\11\1\10\1\3\1\12\1\13\1\14\1\15\1\14"+
    "\1\16\2\17\1\20\1\21\1\22\1\23\1\14\1\24"+
    "\1\25\1\26\1\14\1\27\1\30\1\31\1\32\1\33"+
    "\1\14\1\34\3\14\1\35\1\36\1\37\1\40\1\41"+
    "\1\42\1\43\1\44\1\45\1\46\1\47\1\50\1\51"+
    "\1\52\1\53\1\54\21\55\1\56\1\55\1\57\1\60"+
    "\41\55\67\0\1\4\1\0\1\6\1\4\1\0\1\61"+
    "\1\62\1\4\1\61\2\0\1\61\1\62\1\61\11\0"+
    "\1\61\1\0\1\61\4\0\2\61\26\0\1\63\2\0"+
    "\1\63\3\0\1\63\56\0\1\6\2\0\1\6\3\0"+
    "\1\6\56\0\1\4\1\0\1\6\1\7\1\64\1\61"+
    "\1\62\1\7\1\61\1\0\1\64\1\61\1\62\1\61"+
    "\11\0\1\61\1\0\1\61\4\0\2\61\26\0\1\61"+
    "\2\0\1\61\1\0\1\61\1\62\2\61\2\0\1\61"+
    "\1\62\1\61\11\0\1\61\1\0\1\61\4\0\2\61"+
    "\26\0\1\4\1\0\1\6\1\7\1\64\1\61\1\62"+
    "\1\11\1\65\1\0\1\64\1\61\1\62\1\65\11\0"+
    "\1\61\1\0\1\61\4\0\2\61\26\0\1\66\2\0"+
    "\14\66\5\0\12\66\1\67\6\66\21\0\1\70\2\0"+
    "\1\70\1\66\1\70\1\71\2\70\2\66\1\70\1\71"+
    "\1\70\1\66\5\0\3\66\1\70\1\66\1\70\4\66"+
    "\2\70\5\66\21\0\1\66\2\0\14\66\5\0\21\66"+
    "\21\0\1\70\2\0\1\70\1\66\1\70\1\71\2\70"+
    "\1\66\1\72\1\70\1\71\1\70\1\66\5\0\3\66"+
    "\1\70\1\66\1\70\4\66\2\70\5\66\41\0\1\17"+
    "\67\0\1\73\1\74\42\0\1\66\2\0\14\66\5\0"+
    "\1\66\1\75\17\66\21\0\1\66\2\0\14\66\5\0"+
    "\13\66\1\76\5\66\21\0\1\70\2\0\1\70\1\66"+
    "\1\70\1\71\2\70\2\66\1\70\1\71\1\70\1\66"+
    "\5\0\1\66\1\77\1\66\1\70\1\66\1\70\4\66"+
    "\2\70\5\66\21\0\1\66\2\0\14\66\5\0\3\66"+
    "\1\100\15\66\21\0\1\70\2\0\1\70\1\66\1\70"+
    "\1\71\2\70\1\66\1\101\1\70\1\71\1\70\1\66"+
    "\5\0\1\102\2\66\1\70\1\66\1\70\4\66\2\70"+
    "\5\66\21\0\1\66\2\0\14\66\5\0\5\66\1\103"+
    "\3\66\1\104\7\66\21\0\1\66\2\0\14\66\5\0"+
    "\1\66\1\105\17\66\21\0\1\66\2\0\14\66\5\0"+
    "\6\66\1\106\3\66\1\107\6\66\21\0\1\70\2\0"+
    "\1\70\1\66\1\70\1\71\2\70\1\66\1\110\1\70"+
    "\1\71\1\70\1\66\5\0\1\66\1\111\1\66\1\112"+
    "\1\66\1\70\4\66\2\70\1\113\1\66\1\114\2\66"+
    "\21\0\1\70\2\0\1\70\1\66\1\70\1\71\2\70"+
    "\2\66\1\70\1\71\1\70\1\66\5\0\3\66\1\70"+
    "\1\66\1\70\4\66\2\70\1\115\4\66\21\0\1\66"+
    "\2\0\11\66\1\116\2\66\5\0\21\66\72\0\1\117"+
    "\66\0\1\120\64\0\1\121\7\0\1\122\65\0\1\123"+
    "\65\0\1\124\65\0\1\125\3\0\21\55\1\0\1\55"+
    "\1\126\1\127\62\55\1\0\1\55\1\130\1\131\62\55"+
    "\1\0\1\55\1\132\1\133\41\55\1\0\1\63\1\0"+
    "\1\6\1\63\3\0\1\63\56\0\1\134\2\0\14\134"+
    "\5\0\21\134\21\0\1\135\2\0\1\135\1\134\1\135"+
    "\1\136\2\135\2\134\1\135\1\136\1\135\1\134\5\0"+
    "\3\134\1\135\1\134\1\135\4\134\2\135\5\134\21\0"+
    "\1\134\2\0\7\134\1\137\4\134\5\0\21\134\20\0"+
    "\20\73\2\0\44\73\1\0\1\134\2\0\7\134\1\140"+
    "\4\134\5\0\11\134\1\141\7\134\21\0\1\134\2\0"+
    "\14\134\5\0\10\134\1\142\10\134\21\0\1\134\2\0"+
    "\14\134\5\0\1\134\1\143\17\134\21\0\1\134\2\0"+
    "\14\134\5\0\14\134\1\144\4\134\21\0\1\134\2\0"+
    "\14\134\5\0\6\134\1\145\12\134\21\0\1\134\2\0"+
    "\14\134\5\0\1\134\1\146\17\134\21\0\1\134\2\0"+
    "\14\134\5\0\3\134\1\147\15\134\21\0\1\134\2\0"+
    "\14\134\5\0\20\134\1\150\21\0\1\134\2\0\14\134"+
    "\5\0\16\134\1\151\2\134\21\0\1\134\2\0\14\134"+
    "\5\0\10\134\1\152\10\134\21\0\1\134\2\0\14\134"+
    "\5\0\1\134\1\153\17\134\21\0\1\134\2\0\14\134"+
    "\5\0\13\134\1\154\5\134\21\0\1\135\2\0\1\135"+
    "\1\134\1\135\1\136\2\135\2\134\1\135\1\136\1\135"+
    "\1\134\5\0\3\134\1\135\1\134\1\135\4\134\2\135"+
    "\1\155\4\134\21\0\1\134\2\0\7\134\1\156\4\134"+
    "\5\0\21\134\21\0\1\134\2\0\14\134\5\0\6\134"+
    "\1\157\12\134\21\0\1\134\2\0\14\134\5\0\7\134"+
    "\1\160\11\134\21\0\1\134\2\0\14\134\5\0\11\134"+
    "\1\161\7\134\20\0\21\55\1\0\1\55\1\130\1\0"+
    "\62\55\1\0\1\55\1\0\1\133\62\55\1\0\1\55"+
    "\1\130\1\127\62\55\1\0\1\55\1\126\1\133\41\55"+
    "\1\0\1\162\2\0\14\162\5\0\21\162\21\0\1\163"+
    "\2\0\1\163\1\162\1\163\1\164\2\163\2\162\1\163"+
    "\1\164\1\163\1\162\5\0\3\162\1\163\1\162\1\163"+
    "\4\162\2\163\5\162\21\0\1\162\2\0\14\162\5\0"+
    "\14\162\1\165\4\162\21\0\1\162\2\0\14\162\5\0"+
    "\2\162\1\166\16\162\21\0\1\162\2\0\14\162\5\0"+
    "\6\162\1\167\12\162\21\0\1\162\2\0\14\162\5\0"+
    "\16\162\1\170\2\162\21\0\1\162\2\0\14\162\5\0"+
    "\3\162\1\171\15\162\21\0\1\162\2\0\14\162\5\0"+
    "\14\162\1\172\4\162\21\0\1\162\2\0\14\162\5\0"+
    "\7\162\1\173\1\174\10\162\21\0\1\162\2\0\14\162"+
    "\5\0\11\162\1\175\7\162\21\0\1\162\2\0\14\162"+
    "\5\0\6\162\1\176\12\162\21\0\1\162\2\0\14\162"+
    "\5\0\13\162\1\177\5\162\21\0\1\162\2\0\14\162"+
    "\5\0\13\162\1\200\5\162\21\0\1\162\2\0\14\162"+
    "\5\0\13\162\1\201\5\162\21\0\1\162\2\0\14\162"+
    "\5\0\7\162\1\202\11\162\21\0\1\162\2\0\14\162"+
    "\5\0\3\162\1\203\15\162\21\0\1\162\2\0\14\162"+
    "\5\0\5\162\1\204\13\162\21\0\1\162\2\0\14\162"+
    "\5\0\13\162\1\205\5\162\21\0\1\162\2\0\14\162"+
    "\5\0\14\162\1\206\4\162\21\0\1\207\2\0\14\207"+
    "\5\0\21\207\21\0\1\210\2\0\1\210\1\207\1\210"+
    "\1\211\2\210\2\207\1\210\1\211\1\210\1\207\5\0"+
    "\3\207\1\210\1\207\1\210\4\207\2\210\5\207\21\0"+
    "\1\207\2\0\14\207\5\0\13\207\1\212\5\207\21\0"+
    "\1\207\2\0\14\207\5\0\1\207\1\213\17\207\21\0"+
    "\1\207\2\0\14\207\5\0\10\207\1\214\10\207\21\0"+
    "\1\207\2\0\14\207\5\0\1\207\1\215\17\207\21\0"+
    "\1\207\2\0\14\207\5\0\17\207\1\216\1\207\21\0"+
    "\1\207\2\0\7\207\1\217\4\207\5\0\21\207\21\0"+
    "\1\207\2\0\14\207\5\0\10\207\1\220\10\207\21\0"+
    "\1\207\2\0\14\207\5\0\3\207\1\221\15\207\21\0"+
    "\1\207\2\0\14\207\5\0\6\207\1\222\12\207\21\0"+
    "\1\207\2\0\14\207\5\0\12\207\1\223\6\207\21\0"+
    "\1\207\2\0\14\207\5\0\13\207\1\224\5\207\21\0"+
    "\1\207\2\0\14\207\5\0\10\207\1\225\10\207\21\0"+
    "\1\207\2\0\14\207\5\0\10\207\1\226\10\207\21\0"+
    "\1\207\2\0\14\207\5\0\13\207\1\227\5\207\21\0"+
    "\1\230\2\0\14\230\5\0\21\230\21\0\1\231\2\0"+
    "\1\231\1\230\1\231\1\232\2\231\2\230\1\231\1\232"+
    "\1\231\1\230\5\0\3\230\1\231\1\230\1\231\4\230"+
    "\2\231\5\230\21\0\1\230\2\0\14\230\5\0\3\230"+
    "\1\233\15\230\21\0\1\230\2\0\14\230\5\0\3\230"+
    "\1\234\15\230\21\0\1\230\2\0\14\230\5\0\12\230"+
    "\1\235\6\230\21\0\1\230\2\0\14\230\5\0\6\230"+
    "\1\236\12\230\21\0\1\230\2\0\14\230\5\0\5\230"+
    "\1\237\13\230\21\0\1\230\2\0\14\230\5\0\11\230"+
    "\1\240\7\230\21\0\1\230\2\0\14\230\5\0\10\230"+
    "\1\241\10\230\21\0\1\230\2\0\14\230\5\0\11\230"+
    "\1\242\7\230\21\0\1\243\2\0\14\243\5\0\21\243"+
    "\21\0\1\244\2\0\1\244\1\243\1\244\1\245\2\244"+
    "\2\243\1\244\1\245\1\244\1\243\5\0\3\243\1\244"+
    "\1\243\1\244\4\243\2\244\5\243\21\0\1\243\2\0"+
    "\14\243\5\0\6\243\1\246\12\243\21\0\1\243\2\0"+
    "\14\243\5\0\4\243\1\247\14\243\21\0\1\243\2\0"+
    "\14\243\5\0\6\243\1\250\12\243\21\0\1\243\2\0"+
    "\14\243\5\0\12\243\1\251\6\243\21\0\1\243\2\0"+
    "\7\243\1\252\4\243\5\0\21\243\21\0\1\253\2\0"+
    "\14\253\5\0\21\253\21\0\1\254\2\0\1\254\1\253"+
    "\1\254\1\255\2\254\2\253\1\254\1\255\1\254\1\253"+
    "\5\0\3\253\1\254\1\253\1\254\4\253\2\254\5\253"+
    "\21\0\1\253\2\0\14\253\5\0\7\253\1\256\11\253"+
    "\21\0\1\253\2\0\14\253\5\0\6\253\1\257\12\253"+
    "\21\0\1\260\2\0\14\260\5\0\21\260\21\0\1\261"+
    "\2\0\1\261\1\260\1\261\1\262\2\261\2\260\1\261"+
    "\1\262\1\261\1\260\5\0\3\260\1\261\1\260\1\261"+
    "\4\260\2\261\5\260\21\0\1\263\2\0\14\263\5\0"+
    "\21\263\21\0\1\264\2\0\1\264\1\263\1\264\1\265"+
    "\2\264\2\263\1\264\1\265\1\264\1\263\5\0\3\263"+
    "\1\264\1\263\1\264\4\263\2\264\5\263\21\0\1\266"+
    "\2\0\14\266\5\0\21\266\21\0\1\267\2\0\1\267"+
    "\1\266\1\267\1\270\2\267\2\266\1\267\1\270\1\267"+
    "\1\266\5\0\3\266\1\267\1\266\1\267\4\266\2\267"+
    "\5\266\21\0\1\271\2\0\14\271\5\0\21\271\21\0"+
    "\1\272\2\0\1\272\1\271\1\272\1\273\2\272\2\271"+
    "\1\272\1\273\1\272\1\271\5\0\3\271\1\272\1\271"+
    "\1\272\4\271\2\272\5\271\21\0\1\274\2\0\14\274"+
    "\5\0\21\274\21\0\1\275\2\0\1\275\1\274\1\275"+
    "\1\276\2\275\2\274\1\275\1\276\1\275\1\274\5\0"+
    "\3\274\1\275\1\274\1\275\4\274\2\275\5\274\21\0"+
    "\1\277\2\0\14\277\5\0\21\277\21\0\1\300\2\0"+
    "\1\300\1\277\1\300\1\301\2\300\2\277\1\300\1\301"+
    "\1\300\1\277\5\0\3\277\1\300\1\277\1\300\4\277"+
    "\2\300\5\277\21\0\1\302\2\0\14\302\5\0\21\302"+
    "\21\0\1\303\2\0\1\303\1\302\1\303\1\304\2\303"+
    "\2\302\1\303\1\304\1\303\1\302\5\0\3\302\1\303"+
    "\1\302\1\303\4\302\2\303\5\302\21\0\1\305\2\0"+
    "\14\305\5\0\21\305\21\0\1\306\2\0\1\306\1\305"+
    "\1\306\1\307\2\306\2\305\1\306\1\307\1\306\1\305"+
    "\5\0\3\305\1\306\1\305\1\306\4\305\2\306\5\305"+
    "\21\0\1\310\2\0\14\310\5\0\21\310\21\0\1\311"+
    "\2\0\1\311\1\310\1\311\1\312\2\311\2\310\1\311"+
    "\1\312\1\311\1\310\5\0\3\310\1\311\1\310\1\311"+
    "\4\310\2\311\5\310\21\0\1\313\2\0\14\313\5\0"+
    "\21\313\21\0\1\314\2\0\1\314\1\313\1\314\1\315"+
    "\2\314\2\313\1\314\1\315\1\314\1\313\5\0\3\313"+
    "\1\314\1\313\1\314\4\313\2\314\5\313\21\0\1\316"+
    "\2\0\14\316\5\0\21\316\21\0\1\317\2\0\1\317"+
    "\1\316\1\317\1\320\2\317\2\316\1\317\1\320\1\317"+
    "\1\316\5\0\3\316\1\317\1\316\1\317\4\316\2\317"+
    "\5\316\21\0\1\321\2\0\14\321\5\0\21\321\21\0"+
    "\1\322\2\0\1\322\1\321\1\322\1\323\2\322\2\321"+
    "\1\322\1\323\1\322\1\321\5\0\3\321\1\322\1\321"+
    "\1\322\4\321\2\322\5\321\21\0\1\324\2\0\14\324"+
    "\5\0\21\324\21\0\1\325\2\0\1\325\1\324\1\325"+
    "\1\326\2\325\2\324\1\325\1\326\1\325\1\324\5\0"+
    "\3\324\1\325\1\324\1\325\4\324\2\325\5\324\21\0"+
    "\1\327\2\0\14\327\5\0\21\327\21\0\1\330\2\0"+
    "\1\330\1\327\1\330\1\331\2\330\2\327\1\330\1\331"+
    "\1\330\1\327\5\0\3\327\1\330\1\327\1\330\4\327"+
    "\2\330\5\327\21\0\1\332\2\0\14\332\5\0\21\332"+
    "\21\0\1\333\2\0\1\333\1\332\1\333\1\334\2\333"+
    "\2\332\1\333\1\334\1\333\1\332\5\0\3\332\1\333"+
    "\1\332\1\333\4\332\2\333\5\332\21\0\1\335\2\0"+
    "\14\335\5\0\21\335\21\0\1\336\2\0\1\336\1\335"+
    "\1\336\1\337\2\336\2\335\1\336\1\337\1\336\1\335"+
    "\5\0\3\335\1\336\1\335\1\336\4\335\2\336\5\335"+
    "\21\0\1\340\2\0\14\340\5\0\21\340\21\0\1\341"+
    "\2\0\1\341\1\340\1\341\1\342\2\341\2\340\1\341"+
    "\1\342\1\341\1\340\5\0\3\340\1\341\1\340\1\341"+
    "\4\340\2\341\5\340\21\0\1\343\2\0\14\343\5\0"+
    "\21\343\21\0\1\344\2\0\1\344\1\343\1\344\1\345"+
    "\2\344\2\343\1\344\1\345\1\344\1\343\5\0\3\343"+
    "\1\344\1\343\1\344\4\343\2\344\5\343\21\0\1\346"+
    "\2\0\14\346\5\0\21\346\21\0\1\347\2\0\1\347"+
    "\1\346\1\347\1\350\2\347\2\346\1\347\1\350\1\347"+
    "\1\346\5\0\3\346\1\347\1\346\1\347\4\346\2\347"+
    "\5\346\21\0\1\351\2\0\14\351\5\0\21\351\21\0"+
    "\1\352\2\0\1\352\1\351\1\352\1\353\2\352\2\351"+
    "\1\352\1\353\1\352\1\351\5\0\3\351\1\352\1\351"+
    "\1\352\4\351\2\352\5\351\21\0\1\354\2\0\14\354"+
    "\5\0\21\354\21\0\1\355\2\0\1\355\1\354\1\355"+
    "\1\356\2\355\2\354\1\355\1\356\1\355\1\354\5\0"+
    "\3\354\1\355\1\354\1\355\4\354\2\355\5\354\21\0"+
    "\1\357\2\0\14\357\5\0\21\357\21\0\1\360\2\0"+
    "\1\360\1\357\1\360\1\361\2\360\2\357\1\360\1\361"+
    "\1\360\1\357\5\0\3\357\1\360\1\357\1\360\4\357"+
    "\2\360\5\357\21\0\1\362\2\0\14\362\5\0\21\362"+
    "\21\0\1\363\2\0\1\363\1\362\1\363\1\364\2\363"+
    "\2\362\1\363\1\364\1\363\1\362\5\0\3\362\1\363"+
    "\1\362\1\363\4\362\2\363\5\362\21\0\1\365\2\0"+
    "\14\365\5\0\21\365\21\0\1\366\2\0\1\366\1\365"+
    "\1\366\1\367\2\366\2\365\1\366\1\367\1\366\1\365"+
    "\5\0\3\365\1\366\1\365\1\366\4\365\2\366\5\365"+
    "\21\0\1\370\2\0\14\370\5\0\21\370\21\0\1\371"+
    "\2\0\1\371\1\370\1\371\1\372\2\371\2\370\1\371"+
    "\1\372\1\371\1\370\5\0\3\370\1\371\1\370\1\371"+
    "\4\370\2\371\5\370\21\0\1\373\2\0\14\373\5\0"+
    "\21\373\21\0\1\374\2\0\1\374\1\373\1\374\1\375"+
    "\2\374\2\373\1\374\1\375\1\374\1\373\5\0\3\373"+
    "\1\374\1\373\1\374\4\373\2\374\5\373\21\0\1\376"+
    "\2\0\14\376\5\0\21\376\21\0\1\377\2\0\1\377"+
    "\1\376\1\377\1\u0100\2\377\2\376\1\377\1\u0100\1\377"+
    "\1\376\5\0\3\376\1\377\1\376\1\377\4\376\2\377"+
    "\5\376\21\0\1\u0101\2\0\14\u0101\5\0\21\u0101\21\0"+
    "\1\u0102\2\0\1\u0102\1\u0101\1\u0102\1\u0103\2\u0102\2\u0101"+
    "\1\u0102\1\u0103\1\u0102\1\u0101\5\0\3\u0101\1\u0102\1\u0101"+
    "\1\u0102\4\u0101\2\u0102\5\u0101\21\0\1\u0104\2\0\14\u0104"+
    "\5\0\21\u0104\21\0\1\u0105\2\0\1\u0105\1\u0104\1\u0105"+
    "\1\u0106\2\u0105\2\u0104\1\u0105\1\u0106\1\u0105\1\u0104\5\0"+
    "\3\u0104\1\u0105\1\u0104\1\u0105\4\u0104\2\u0105\5\u0104\21\0"+
    "\1\u0107\2\0\14\u0107\5\0\21\u0107\21\0\1\u0108\2\0"+
    "\1\u0108\1\u0107\1\u0108\1\u0109\2\u0108\2\u0107\1\u0108\1\u0109"+
    "\1\u0108\1\u0107\5\0\3\u0107\1\u0108\1\u0107\1\u0108\4\u0107"+
    "\2\u0108\5\u0107\21\0\1\u010a\2\0\14\u010a\5\0\21\u010a"+
    "\21\0\1\u010b\2\0\1\u010b\1\u010a\1\u010b\1\u010c\2\u010b"+
    "\2\u010a\1\u010b\1\u010c\1\u010b\1\u010a\5\0\3\u010a\1\u010b"+
    "\1\u010a\1\u010b\4\u010a\2\u010b\5\u010a\21\0\1\u010d\2\0"+
    "\14\u010d\5\0\21\u010d\21\0\1\u010e\2\0\1\u010e\1\u010d"+
    "\1\u010e\1\u010f\2\u010e\2\u010d\1\u010e\1\u010f\1\u010e\1\u010d"+
    "\5\0\3\u010d\1\u010e\1\u010d\1\u010e\4\u010d\2\u010e\5\u010d"+
    "\21\0\1\u0110\2\0\14\u0110\5\0\21\u0110\21\0\1\u0111"+
    "\2\0\1\u0111\1\u0110\1\u0111\1\u0112\2\u0111\2\u0110\1\u0111"+
    "\1\u0112\1\u0111\1\u0110\5\0\3\u0110\1\u0111\1\u0110\1\u0111"+
    "\4\u0110\2\u0111\5\u0110\21\0\1\u0113\2\0\14\u0113\5\0"+
    "\21\u0113\21\0\1\u0114\2\0\1\u0114\1\u0113\1\u0114\1\u0115"+
    "\2\u0114\2\u0113\1\u0114\1\u0115\1\u0114\1\u0113\5\0\3\u0113"+
    "\1\u0114\1\u0113\1\u0114\4\u0113\2\u0114\5\u0113\21\0\1\u0116"+
    "\2\0\14\u0116\5\0\21\u0116\21\0\1\u0117\2\0\1\u0117"+
    "\1\u0116\1\u0117\1\u0118\2\u0117\2\u0116\1\u0117\1\u0118\1\u0117"+
    "\1\u0116\5\0\3\u0116\1\u0117\1\u0116\1\u0117\4\u0116\2\u0117"+
    "\5\u0116\21\0\1\u0119\2\0\14\u0119\5\0\21\u0119\21\0"+
    "\1\u011a\2\0\1\u011a\1\u0119\1\u011a\1\u011b\2\u011a\2\u0119"+
    "\1\u011a\1\u011b\1\u011a\1\u0119\5\0\3\u0119\1\u011a\1\u0119"+
    "\1\u011a\4\u0119\2\u011a\5\u0119\21\0\1\u011c\2\0\14\u011c"+
    "\5\0\21\u011c\21\0\1\u011d\2\0\1\u011d\1\u011c\1\u011d"+
    "\1\u011e\2\u011d\2\u011c\1\u011d\1\u011e\1\u011d\1\u011c\5\0"+
    "\3\u011c\1\u011d\1\u011c\1\u011d\4\u011c\2\u011d\5\u011c\21\0"+
    "\1\u011f\2\0\14\u011f\5\0\21\u011f\21\0\1\u0120\2\0"+
    "\1\u0120\1\u011f\1\u0120\1\u0121\2\u0120\2\u011f\1\u0120\1\u0121"+
    "\1\u0120\1\u011f\5\0\3\u011f\1\u0120\1\u011f\1\u0120\4\u011f"+
    "\2\u0120\5\u011f\21\0\1\u0122\2\0\14\u0122\5\0\21\u0122"+
    "\21\0\1\u0123\2\0\1\u0123\1\u0122\1\u0123\1\u0124\2\u0123"+
    "\2\u0122\1\u0123\1\u0124\1\u0123\1\u0122\5\0\3\u0122\1\u0123"+
    "\1\u0122\1\u0123\4\u0122\2\u0123\5\u0122\21\0\1\u0125\2\0"+
    "\14\u0125\5\0\21\u0125\21\0\1\u0126\2\0\1\u0126\1\u0125"+
    "\1\u0126\1\u0127\2\u0126\2\u0125\1\u0126\1\u0127\1\u0126\1\u0125"+
    "\5\0\3\u0125\1\u0126\1\u0125\1\u0126\4\u0125\2\u0126\5\u0125"+
    "\21\0\1\u0128\2\0\14\u0128\5\0\21\u0128\21\0\1\u0129"+
    "\2\0\1\u0129\1\u0128\1\u0129\1\u012a\2\u0129\2\u0128\1\u0129"+
    "\1\u012a\1\u0129\1\u0128\5\0\3\u0128\1\u0129\1\u0128\1\u0129"+
    "\4\u0128\2\u0129\5\u0128\21\0\1\u012b\2\0\14\u012b\5\0"+
    "\21\u012b\21\0\1\u012c\2\0\1\u012c\1\u012b\1\u012c\1\u012d"+
    "\2\u012c\2\u012b\1\u012c\1\u012d\1\u012c\1\u012b\5\0\3\u012b"+
    "\1\u012c\1\u012b\1\u012c\4\u012b\2\u012c\5\u012b\21\0\1\u012e"+
    "\2\0\14\u012e\5\0\21\u012e\21\0\1\u012f\2\0\1\u012f"+
    "\1\u012e\1\u012f\1\u0130\2\u012f\2\u012e\1\u012f\1\u0130\1\u012f"+
    "\1\u012e\5\0\3\u012e\1\u012f\1\u012e\1\u012f\4\u012e\2\u012f"+
    "\5\u012e\21\0\1\u0131\2\0\14\u0131\5\0\21\u0131\21\0"+
    "\1\u0132\2\0\1\u0132\1\u0131\1\u0132\1\u0133\2\u0132\2\u0131"+
    "\1\u0132\1\u0133\1\u0132\1\u0131\5\0\3\u0131\1\u0132\1\u0131"+
    "\1\u0132\4\u0131\2\u0132\5\u0131\21\0\1\u0134\2\0\14\u0134"+
    "\5\0\21\u0134\21\0\1\u0135\2\0\1\u0135\1\u0134\1\u0135"+
    "\1\u0136\2\u0135\2\u0134\1\u0135\1\u0136\1\u0135\1\u0134\5\0"+
    "\3\u0134\1\u0135\1\u0134\1\u0135\4\u0134\2\u0135\5\u0134\21\0"+
    "\1\u0137\2\0\14\u0137\5\0\21\u0137\21\0\1\u0138\2\0"+
    "\1\u0138\1\u0137\1\u0138\1\u0139\2\u0138\2\u0137\1\u0138\1\u0139"+
    "\1\u0138\1\u0137\5\0\3\u0137\1\u0138\1\u0137\1\u0138\4\u0137"+
    "\2\u0138\5\u0137\21\0\1\u013a\2\0\14\u013a\5\0\21\u013a"+
    "\21\0\1\u013b\2\0\1\u013b\1\u013a\1\u013b\1\u013c\2\u013b"+
    "\2\u013a\1\u013b\1\u013c\1\u013b\1\u013a\5\0\3\u013a\1\u013b"+
    "\1\u013a\1\u013b\4\u013a\2\u013b\5\u013a\21\0\1\u013d\2\0"+
    "\14\u013d\5\0\21\u013d\21\0\1\u013e\2\0\1\u013e\1\u013d"+
    "\1\u013e\1\u013f\2\u013e\2\u013d\1\u013e\1\u013f\1\u013e\1\u013d"+
    "\5\0\3\u013d\1\u013e\1\u013d\1\u013e\4\u013d\2\u013e\5\u013d"+
    "\21\0\1\u0140\2\0\14\u0140\5\0\21\u0140\21\0\1\u0141"+
    "\2\0\1\u0141\1\u0140\1\u0141\1\u0142\2\u0141\2\u0140\1\u0141"+
    "\1\u0142\1\u0141\1\u0140\5\0\3\u0140\1\u0141\1\u0140\1\u0141"+
    "\4\u0140\2\u0141\5\u0140\21\0\1\u0143\2\0\14\u0143\5\0"+
    "\21\u0143\21\0\1\u0144\2\0\1\u0144\1\u0143\1\u0144\1\u0145"+
    "\2\u0144\2\u0143\1\u0144\1\u0145\1\u0144\1\u0143\5\0\3\u0143"+
    "\1\u0144\1\u0143\1\u0144\4\u0143\2\u0144\5\u0143\21\0\1\u0146"+
    "\2\0\14\u0146\5\0\21\u0146\21\0\1\u0147\2\0\1\u0147"+
    "\1\u0146\1\u0147\1\u0148\2\u0147\2\u0146\1\u0147\1\u0148\1\u0147"+
    "\1\u0146\5\0\3\u0146\1\u0147\1\u0146\1\u0147\4\u0146\2\u0147"+
    "\5\u0146\21\0\1\u0149\2\0\14\u0149\5\0\21\u0149\21\0"+
    "\1\u014a\2\0\1\u014a\1\u0149\1\u014a\1\u014b\2\u014a\2\u0149"+
    "\1\u014a\1\u014b\1\u014a\1\u0149\5\0\3\u0149\1\u014a\1\u0149"+
    "\1\u014a\4\u0149\2\u014a\5\u0149\21\0\1\u014c\2\0\14\u014c"+
    "\5\0\21\u014c\21\0\1\u014d\2\0\1\u014d\1\u014c\1\u014d"+
    "\1\u014e\2\u014d\2\u014c\1\u014d\1\u014e\1\u014d\1\u014c\5\0"+
    "\3\u014c\1\u014d\1\u014c\1\u014d\4\u014c\2\u014d\5\u014c\21\0"+
    "\1\u014f\2\0\14\u014f\5\0\21\u014f\21\0\1\u0150\2\0"+
    "\1\u0150\1\u014f\1\u0150\1\u0151\2\u0150\2\u014f\1\u0150\1\u0151"+
    "\1\u0150\1\u014f\5\0\3\u014f\1\u0150\1\u014f\1\u0150\4\u014f"+
    "\2\u0150\5\u014f\21\0\1\u0152\2\0\14\u0152\5\0\21\u0152"+
    "\21\0\1\u0153\2\0\1\u0153\1\u0152\1\u0153\1\u0154\2\u0153"+
    "\2\u0152\1\u0153\1\u0154\1\u0153\1\u0152\5\0\3\u0152\1\u0153"+
    "\1\u0152\1\u0153\4\u0152\2\u0153\5\u0152\21\0\1\u0155\2\0"+
    "\14\u0155\5\0\21\u0155\21\0\1\u0156\2\0\1\u0156\1\u0155"+
    "\1\u0156\1\u0157\2\u0156\2\u0155\1\u0156\1\u0157\1\u0156\1\u0155"+
    "\5\0\3\u0155\1\u0156\1\u0155\1\u0156\4\u0155\2\u0156\5\u0155"+
    "\21\0\1\u0158\2\0\14\u0158\5\0\21\u0158\21\0\1\u0159"+
    "\2\0\1\u0159\1\u0158\1\u0159\1\u015a\2\u0159\2\u0158\1\u0159"+
    "\1\u015a\1\u0159\1\u0158\5\0\3\u0158\1\u0159\1\u0158\1\u0159"+
    "\4\u0158\2\u0159\5\u0158\21\0\1\u015b\2\0\14\u015b\5\0"+
    "\21\u015b\21\0\1\u015c\2\0\1\u015c\1\u015b\1\u015c\1\u015d"+
    "\2\u015c\2\u015b\1\u015c\1\u015d\1\u015c\1\u015b\5\0\3\u015b"+
    "\1\u015c\1\u015b\1\u015c\4\u015b\2\u015c\5\u015b\21\0\1\u015e"+
    "\2\0\14\u015e\5\0\21\u015e\21\0\1\u015f\2\0\1\u015f"+
    "\1\u015e\1\u015f\1\u0160\2\u015f\2\u015e\1\u015f\1\u0160\1\u015f"+
    "\1\u015e\5\0\3\u015e\1\u015f\1\u015e\1\u015f\4\u015e\2\u015f"+
    "\5\u015e\21\0\1\u0161\2\0\14\u0161\5\0\21\u0161\21\0"+
    "\1\u0162\2\0\1\u0162\1\u0161\1\u0162\1\u0163\2\u0162\2\u0161"+
    "\1\u0162\1\u0163\1\u0162\1\u0161\5\0\3\u0161\1\u0162\1\u0161"+
    "\1\u0162\4\u0161\2\u0162\5\u0161\21\0\1\u0164\2\0\14\u0164"+
    "\5\0\21\u0164\21\0\1\u0165\2\0\1\u0165\1\u0164\1\u0165"+
    "\1\u0166\2\u0165\2\u0164\1\u0165\1\u0166\1\u0165\1\u0164\5\0"+
    "\3\u0164\1\u0165\1\u0164\1\u0165\4\u0164\2\u0165\5\u0164\21\0"+
    "\1\u0167\2\0\14\u0167\5\0\21\u0167\21\0\1\u0168\2\0"+
    "\1\u0168\1\u0167\1\u0168\1\u0169\2\u0168\2\u0167\1\u0168\1\u0169"+
    "\1\u0168\1\u0167\5\0\3\u0167\1\u0168\1\u0167\1\u0168\4\u0167"+
    "\2\u0168\5\u0167\21\0\1\u016a\2\0\14\u016a\5\0\21\u016a"+
    "\21\0\1\u016b\2\0\1\u016b\1\u016a\1\u016b\1\u016c\2\u016b"+
    "\2\u016a\1\u016b\1\u016c\1\u016b\1\u016a\5\0\3\u016a\1\u016b"+
    "\1\u016a\1\u016b\4\u016a\2\u016b\5\u016a\21\0\1\u016d\2\0"+
    "\14\u016d\5\0\21\u016d\21\0\1\u016e\2\0\1\u016e\1\u016d"+
    "\1\u016e\1\u016f\2\u016e\2\u016d\1\u016e\1\u016f\1\u016e\1\u016d"+
    "\5\0\3\u016d\1\u016e\1\u016d\1\u016e\4\u016d\2\u016e\5\u016d"+
    "\21\0\1\u0170\2\0\14\u0170\5\0\21\u0170\21\0\1\u0171"+
    "\2\0\1\u0171\1\u0170\1\u0171\1\u0172\2\u0171\2\u0170\1\u0171"+
    "\1\u0172\1\u0171\1\u0170\5\0\3\u0170\1\u0171\1\u0170\1\u0171"+
    "\4\u0170\2\u0171\5\u0170\21\0\1\u0173\2\0\14\u0173\5\0"+
    "\21\u0173\21\0\1\u0174\2\0\1\u0174\1\u0173\1\u0174\1\u0175"+
    "\2\u0174\2\u0173\1\u0174\1\u0175\1\u0174\1\u0173\5\0\3\u0173"+
    "\1\u0174\1\u0173\1\u0174\4\u0173\2\u0174\5\u0173\21\0\1\u0176"+
    "\2\0\14\u0176\5\0\21\u0176\21\0\1\u0177\2\0\1\u0177"+
    "\1\u0176\1\u0177\1\u0178\2\u0177\2\u0176\1\u0177\1\u0178\1\u0177"+
    "\1\u0176\5\0\3\u0176\1\u0177\1\u0176\1\u0177\4\u0176\2\u0177"+
    "\5\u0176\21\0\1\u0179\2\0\14\u0179\5\0\21\u0179\21\0"+
    "\1\u017a\2\0\1\u017a\1\u0179\1\u017a\1\u017b\2\u017a\2\u0179"+
    "\1\u017a\1\u017b\1\u017a\1\u0179\5\0\3\u0179\1\u017a\1\u0179"+
    "\1\u017a\4\u0179\2\u017a\5\u0179\21\0\1\u017c\2\0\14\u017c"+
    "\5\0\21\u017c\21\0\1\u017d\2\0\1\u017d\1\u017c\1\u017d"+
    "\1\u017e\2\u017d\2\u017c\1\u017d\1\u017e\1\u017d\1\u017c\5\0"+
    "\3\u017c\1\u017d\1\u017c\1\u017d\4\u017c\2\u017d\5\u017c\21\0"+
    "\1\u017f\2\0\14\u017f\5\0\21\u017f\21\0\1\u0180\2\0"+
    "\1\u0180\1\u017f\1\u0180\1\u0181\2\u0180\2\u017f\1\u0180\1\u0181"+
    "\1\u0180\1\u017f\5\0\3\u017f\1\u0180\1\u017f\1\u0180\4\u017f"+
    "\2\u0180\5\u017f\21\0\1\u0182\2\0\14\u0182\5\0\21\u0182"+
    "\21\0\1\u0183\2\0\1\u0183\1\u0182\1\u0183\1\u0184\2\u0183"+
    "\2\u0182\1\u0183\1\u0184\1\u0183\1\u0182\5\0\3\u0182\1\u0183"+
    "\1\u0182\1\u0183\4\u0182\2\u0183\5\u0182\21\0\1\u0185\2\0"+
    "\14\u0185\5\0\21\u0185\21\0\1\u0186\2\0\1\u0186\1\u0185"+
    "\1\u0186\1\62\2\u0186\2\u0185\1\u0186\1\62\1\u0186\1\u0185"+
    "\5\0\3\u0185\1\u0186\1\u0185\1\u0186\4\u0185\2\u0186\5\u0185"+
    "\20\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[14094];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\1\1\11\13\1\1\11\1\1\1\11\13\1"+
    "\3\11\3\1\6\11\5\1\1\11\2\1\1\0\1\11"+
    "\1\1\1\11\7\1\1\11\22\1\7\11\2\0\1\1"+
    "\2\11\u012a\1\1\11\1\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[390];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
    private int comment_count = 0;

    private Symbol symbol(int type){
        return new Symbol(type, yyline, yycolumn);
    }

    private Symbol symbol(int type, Object value){
        return new Symbol(type, yyline, yycolumn, value);
    }


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  AnalizadorMorfologico(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  AnalizadorMorfologico(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn++;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 55: 
          { return symbol(sym.CPRINTF);
          }
        case 58: break;
        case 27: 
          { return symbol(sym.OF);
          }
        case 59: break;
        case 5: 
          { return symbol(sym.NUM_REAL, new Float(yytext()));
          }
        case 60: break;
        case 7: 
          { return symbol(sym.ENTRE);
          }
        case 61: break;
        case 29: 
          { Utility.info("[Omitido comentario multiple en linea: "+(yyline+1)+"]");
                    yybegin(COMMENT); comment_count++;
          }
        case 62: break;
        case 42: 
          { return symbol(sym.CTE_BOOLEANA);
          }
        case 63: break;
        case 16: 
          { return symbol(sym.RIGHT_PAREN);
          }
        case 64: break;
        case 19: 
          { return symbol(sym.ASIGNACION);
          }
        case 65: break;
        case 24: 
          { return symbol(sym.NUM_HEX, yytext());
          }
        case 66: break;
        case 50: 
          { return symbol(sym.PRINTF);
          }
        case 67: break;
        case 39: 
          { return symbol(sym.INT);
          }
        case 68: break;
        case 25: 
          { return symbol(sym.NUM_OCT, yytext());
          }
        case 69: break;
        case 36: 
          { return symbol(sym.LESS_EQUALS);
          }
        case 70: break;
        case 4: 
          { return symbol(sym.MENOS);
          }
        case 71: break;
        case 37: 
          { comment_count++;
          }
        case 72: break;
        case 20: 
          { return symbol(sym.NOT);
          }
        case 73: break;
        case 31: 
          { return symbol(sym.AND);
          }
        case 74: break;
        case 46: 
          { return symbol(sym.CONSTANTE);
          }
        case 75: break;
        case 33: 
          { return symbol(sym.EQUALS);
          }
        case 76: break;
        case 52: 
          { return symbol(sym.MALLOC);
          }
        case 77: break;
        case 51: 
          { return symbol(sym.RETURN);
          }
        case 78: break;
        case 8: 
          { return symbol(sym.ASTERISCO);
          }
        case 79: break;
        case 45: 
          { return symbol(sym.ARRAY);
          }
        case 80: break;
        case 22: 
          { return symbol(sym.LESS);
          }
        case 81: break;
        case 18: 
          { return symbol(sym.RIGHT_CORCHETE);
          }
        case 82: break;
        case 23: 
          { System.out.print(yytext());
          }
        case 83: break;
        case 41: 
          { return symbol(sym.SIZE);
          }
        case 84: break;
        case 26: 
          { return symbol(sym.NUM_BIN, yytext());
          }
        case 85: break;
        case 28: 
          { Utility.info("[Omitido comentario simple en linea: "+(yyline+1)+"]");
          }
        case 86: break;
        case 35: 
          { return symbol(sym.GREATER_EQUALS);
          }
        case 87: break;
        case 44: 
          { return symbol(sym.ELSE);
          }
        case 88: break;
        case 14: 
          { return symbol(sym.RIGHT_LLAVE);
          }
        case 89: break;
        case 21: 
          { return symbol(sym.GREATER);
          }
        case 90: break;
        case 49: 
          { return symbol(sym.WHILE);
          }
        case 91: break;
        case 30: 
          { return symbol(sym.IF);
          }
        case 92: break;
        case 11: 
          { return symbol(sym.PUNTOS);
          }
        case 93: break;
        case 38: 
          { if (--comment_count == 0) yybegin(YYINITIAL);
          }
        case 94: break;
        case 3: 
          { return symbol(sym.NUM_ENTERO, new Integer(yytext()));
          }
        case 95: break;
        case 43: 
          { return symbol(sym.FREE);
          }
        case 96: break;
        case 54: 
          { return symbol(sym.PROGRAMA);
          }
        case 97: break;
        case 15: 
          { return symbol(sym.LEFT_PAREN);
          }
        case 98: break;
        case 32: 
          { return symbol(sym.OR);
          }
        case 99: break;
        case 10: 
          { return symbol(sym.COMA);
          }
        case 100: break;
        case 40: 
          { return symbol(sym.FOR);
          }
        case 101: break;
        case 48: 
          { return symbol(sym.FLOAT);
          }
        case 102: break;
        case 6: 
          { return symbol(sym.ID_VAR, yytext());
          }
        case 103: break;
        case 9: 
          { return symbol(sym.SEMI);
          }
        case 104: break;
        case 53: 
          { return symbol(sym.BOOLEAN);
          }
        case 105: break;
        case 17: 
          { return symbol(sym.LEFT_CORCHETE);
          }
        case 106: break;
        case 57: 
          { return symbol(sym.FUNCTION);
          }
        case 107: break;
        case 47: 
          { return symbol(sym.SCANF);
          }
        case 108: break;
        case 12: 
          { return symbol(sym.MAS);
          }
        case 109: break;
        case 34: 
          { return symbol(sym.NOT_EQUALS);
          }
        case 110: break;
        case 56: 
          { return symbol(sym.CONTAINS);
          }
        case 111: break;
        case 13: 
          { return symbol(sym.LEFT_LLAVE);
          }
        case 112: break;
        case 1: 
          { 
          }
        case 113: break;
        case 2: 
          { Utility.error(Utility.E_SYMBOL_NOT_FOUND,yyline+1,yycolumn+1,yytext());
                    System.exit(0);
          }
        case 114: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
              { return new java_cup.runtime.Symbol(sym.EOF); }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }

  /**
   * Runs the scanner on input files.
   *
   * This is a standalone scanner, it will print any unmatched
   * text to System.out unchanged.
   *
   * @param argv   the command line, contains the filenames to run
   *               the scanner on.
   */
  public static void main(String argv[]) {
    if (argv.length == 0) {
      System.out.println("Usage : java AnalizadorMorfologico <inputfile>");
    }
    else {
      for (int i = 0; i < argv.length; i++) {
        AnalizadorMorfologico scanner = null;
        try {
          scanner = new AnalizadorMorfologico( new java.io.FileReader(argv[i]) );
          while ( !scanner.zzAtEOF ) scanner.next_token();
        }
        catch (java.io.FileNotFoundException e) {
          System.out.println("File not found : \""+argv[i]+"\"");
        }
        catch (java.io.IOException e) {
          System.out.println("IO error scanning file \""+argv[i]+"\"");
          System.out.println(e);
        }
        catch (Exception e) {
          System.out.println("Unexpected exception:");
          e.printStackTrace();
        }
      }
    }
  }


}
